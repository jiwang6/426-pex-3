// This tells SableCC to put all of the code in a package called CS426
Package CS426;

// Helpers are sets that let you talk about multiple characters in the same way
Helpers
	whitespaces = ' ' | 9 | 10 | 13;
	whole = ['1' .. '9'];
	natural = ['0' + whole];
	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	
// PEX 1 - Lexer Portion
Tokens
	// Keywords
	keyword_if = 'if';
	keyword_else = 'else';
	keyword_while = 'while';
	keyword_constant = 'constant';
	keyword_function = 'function';
	keyword_main = 'main';

	// Operations and EOL
	assign = '=';
	plus = '+';
	sub = '-';
	mult = '*';
	div = '/';
	equivalent = '==';
	not_equivalent = '!=';
	greater_than = '>';
	greater_than_or_equal = '>=';
	less_than = '<';
	less_than_or_equal = '<=';
	or = '||';
	and = '&&';
	not = '!';
	eol = ';';

	// Strings
	escape_quote = '\”';
	string = '"' ([[0 .. 0xffff] - [10 + 13]])* '"';

	left_parenthesis = '(';
	right_parenthesis = ')';
	open_brace = '{';
	closed_brace = '}';
	comma = ',';

	// Comments
	comment = '//' ([[0 .. 0xffff] - [10 + 13]])*;

	// Literals
	integer = '0' | whole natural*;
	float = (('0' | natural whole*) '.' whole+) | (('0' | natural whole*) '.' whole+ 'e' '-'? natural whole*) | (('0' | natural whole*) 'e' '-'? natural whole*);

	// Variable Names
	id = '_'? ((letter+ | whole+) '_'?)+;

	// Whitespace
	blank = whitespaces+;

Ignored Tokens
	blank, comment;

// PEX 2 - Parser Portion
Productions
	program = lines; // everything is contained in 1 program
	lines = {constant} constants lines | {function} functions; 

	constants = keyword_constant [type]:id [varname]:id assign expression eol;
	declare_statement = [type]:id [varname]:id eol;

	functions = {non_main} function functions | {main} main; // main() will be the last thing in the program
	function = keyword_function id left_parenthesis arguments right_parenthesis open_brace statements closed_brace;
	main = keyword_function keyword_main left_parenthesis right_parenthesis open_brace statements closed_brace; // forcing main to not have any arguments

	arguments = {multiple} arguments comma [type]:id [varname]:id | {single} [type]:id [varname]:id | {pass} ;

	statements = {multiple} statement statements | {if} if_statement statements | {if_else} if_else_statement statements | {while} while_statement statements | {pass} ;
	statement = {assignment} assign_statement | {declaration} declare_statement | {call} function_call_statement;

	if_statement = keyword_if left_parenthesis expression right_parenthesis open_brace statements closed_brace;
	if_else_statement = if_statement keyword_else open_brace statements closed_brace;

	while_statement = keyword_while left_parenthesis expression right_parenthesis open_brace statements closed_brace;

	assign_statement = id assign expression eol;
	
	function_call_statement = id left_parenthesis parameters right_parenthesis eol;

	parameters = {one} expression | {multiple} parameters comma expression | {pass} ;

	expression = {negate} not expression8 | {pass} expression8;
	expression8 = {or_comparison} expression8 or expression7 | {pass} expression7;
	expression7 = {and_comparison} expression7 and expression6 | {pass} expression6;
	expression6 = {equals} expression6 equivalent expression5 | {not_equal} expression6 not_equivalent expression5 | {pass} expression5;
	expression5 = {greater_than} [first]:expression4 greater_than [second]:expression4 | {less_than} [first]:expression4 less_than [second]:expression4 | 
					{greater_than_or_equal} [first]:expression4 greater_than_or_equal [second]:expression4 | {less_than_or_equal} [first]:expression4 less_than_or_equal [second]:expression4 | {pass} expression4;
		// don't allow chaining of boolean operations

	expression4 = {add} expression4 plus expression3 | {subtract} expression4 sub expression3 | {pass} expression3;
	expression3 = {multiply} expression3 mult expression2 | {division} expression3 div expression2 | {pass} expression2;
	expression2 = {negative} sub expression1 | {pass} expression1;
	expression1 = {parenthsis} left_parenthesis expression right_parenthesis | {pass} operand;
	operand = {string} string | {int} integer | {float} float | {variable} id;