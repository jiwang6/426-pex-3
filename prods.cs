/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PLines : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PFunctions : Node
{
}

public abstract class PFunction : Node
{
}

public abstract class PMain : Node
{
}

public abstract class PArguments : Node
{
}

public abstract class PNumArgs : Node
{
}

public abstract class PArgument : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PIfElseStatement : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class PCondition : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PAssignment : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PNumParameters : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PEquivalenceComparator : Node
{
}

public abstract class PGreatLessComparator : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression7 : Node
{
}

public abstract class PExpression6 : Node
{
}

public abstract class PExpression5 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression1 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private PLines _lines_;

    public AProgram ()
    {
    }

    public AProgram (
            PLines _lines_
    )
    {
        SetLines (_lines_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PLines)CloneNode (_lines_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PLines GetLines ()
    {
        return _lines_;
    }

    public void SetLines (PLines node)
    {
        if(_lines_ != null)
        {
            _lines_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lines_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lines_ == child )
        {
            _lines_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lines_ == oldChild )
        {
            SetLines ((PLines) newChild);
            return;
        }
    }

}
public sealed class AConstantLines : PLines
{
    private PConstants _constants_;
    private PLines _lines_;

    public AConstantLines ()
    {
    }

    public AConstantLines (
            PConstants _constants_,
            PLines _lines_
    )
    {
        SetConstants (_constants_);
        SetLines (_lines_);
    }

    public override Object Clone()
    {
        return new AConstantLines (
            (PConstants)CloneNode (_constants_),
            (PLines)CloneNode (_lines_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantLines(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PLines GetLines ()
    {
        return _lines_;
    }

    public void SetLines (PLines node)
    {
        if(_lines_ != null)
        {
            _lines_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_lines_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _lines_ == child )
        {
            _lines_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _lines_ == oldChild )
        {
            SetLines ((PLines) newChild);
            return;
        }
    }

}
public sealed class AFunctionLines : PLines
{
    private PFunctions _functions_;

    public AFunctionLines ()
    {
    }

    public AFunctionLines (
            PFunctions _functions_
    )
    {
        SetFunctions (_functions_);
    }

    public override Object Clone()
    {
        return new AFunctionLines (
            (PFunctions)CloneNode (_functions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionLines(this);
    }

    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
    }

}
public sealed class AConstants : PConstants
{
    private TKeywordConstant _keyword_constant_;
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private PAssignment _assignment_;
    private TEol _eol_;

    public AConstants ()
    {
    }

    public AConstants (
            TKeywordConstant _keyword_constant_,
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            PAssignment _assignment_,
            TEol _eol_
    )
    {
        SetKeywordConstant (_keyword_constant_);
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetAssignment (_assignment_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AConstants (
            (TKeywordConstant)CloneNode (_keyword_constant_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (PAssignment)CloneNode (_assignment_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstants(this);
    }

    public TKeywordConstant GetKeywordConstant ()
    {
        return _keyword_constant_;
    }

    public void SetKeywordConstant (TKeywordConstant node)
    {
        if(_keyword_constant_ != null)
        {
            _keyword_constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_constant_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_constant_)
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_assignment_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_constant_ == child )
        {
            _keyword_constant_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_constant_ == oldChild )
        {
            SetKeywordConstant ((TKeywordConstant) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ADeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclareStatement ()
    {
    }

    public ADeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ANonMainFunctions : PFunctions
{
    private PFunction _function_;
    private PFunctions _functions_;

    public ANonMainFunctions ()
    {
    }

    public ANonMainFunctions (
            PFunction _function_,
            PFunctions _functions_
    )
    {
        SetFunction (_function_);
        SetFunctions (_functions_);
    }

    public override Object Clone()
    {
        return new ANonMainFunctions (
            (PFunction)CloneNode (_function_),
            (PFunctions)CloneNode (_functions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonMainFunctions(this);
    }

    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_functions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
    }

}
public sealed class AMainFunctions : PFunctions
{
    private PMain _main_;

    public AMainFunctions ()
    {
    }

    public AMainFunctions (
            PMain _main_
    )
    {
        SetMain (_main_);
    }

    public override Object Clone()
    {
        return new AMainFunctions (
            (PMain)CloneNode (_main_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainFunctions(this);
    }

    public PMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (PMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((PMain) newChild);
            return;
        }
    }

}
public sealed class AFunction : PFunction
{
    private TKeywordFunction _keyword_function_;
    private TId _id_;
    private TLeftParenthesis _left_parenthesis_;
    private PArguments _arguments_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TClosedBrace _closed_brace_;

    public AFunction ()
    {
    }

    public AFunction (
            TKeywordFunction _keyword_function_,
            TId _id_,
            TLeftParenthesis _left_parenthesis_,
            PArguments _arguments_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TClosedBrace _closed_brace_
    )
    {
        SetKeywordFunction (_keyword_function_);
        SetId (_id_);
        SetLeftParenthesis (_left_parenthesis_);
        SetArguments (_arguments_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetClosedBrace (_closed_brace_);
    }

    public override Object Clone()
    {
        return new AFunction (
            (TKeywordFunction)CloneNode (_keyword_function_),
            (TId)CloneNode (_id_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PArguments)CloneNode (_arguments_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TClosedBrace)CloneNode (_closed_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunction(this);
    }

    public TKeywordFunction GetKeywordFunction ()
    {
        return _keyword_function_;
    }

    public void SetKeywordFunction (TKeywordFunction node)
    {
        if(_keyword_function_ != null)
        {
            _keyword_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosedBrace GetClosedBrace ()
    {
        return _closed_brace_;
    }

    public void SetClosedBrace (TClosedBrace node)
    {
        if(_closed_brace_ != null)
        {
            _closed_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closed_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_function_)
            + ToString (_id_)
            + ToString (_left_parenthesis_)
            + ToString (_arguments_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_closed_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_function_ == child )
        {
            _keyword_function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closed_brace_ == child )
        {
            _closed_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_function_ == oldChild )
        {
            SetKeywordFunction ((TKeywordFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closed_brace_ == oldChild )
        {
            SetClosedBrace ((TClosedBrace) newChild);
            return;
        }
    }

}
public sealed class AMain : PMain
{
    private TKeywordFunction _keyword_function_;
    private TKeywordMain _keyword_main_;
    private TLeftParenthesis _left_parenthesis_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TClosedBrace _closed_brace_;

    public AMain ()
    {
    }

    public AMain (
            TKeywordFunction _keyword_function_,
            TKeywordMain _keyword_main_,
            TLeftParenthesis _left_parenthesis_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TClosedBrace _closed_brace_
    )
    {
        SetKeywordFunction (_keyword_function_);
        SetKeywordMain (_keyword_main_);
        SetLeftParenthesis (_left_parenthesis_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetClosedBrace (_closed_brace_);
    }

    public override Object Clone()
    {
        return new AMain (
            (TKeywordFunction)CloneNode (_keyword_function_),
            (TKeywordMain)CloneNode (_keyword_main_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TClosedBrace)CloneNode (_closed_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMain(this);
    }

    public TKeywordFunction GetKeywordFunction ()
    {
        return _keyword_function_;
    }

    public void SetKeywordFunction (TKeywordFunction node)
    {
        if(_keyword_function_ != null)
        {
            _keyword_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_function_ = node;
    }
    public TKeywordMain GetKeywordMain ()
    {
        return _keyword_main_;
    }

    public void SetKeywordMain (TKeywordMain node)
    {
        if(_keyword_main_ != null)
        {
            _keyword_main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_main_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosedBrace GetClosedBrace ()
    {
        return _closed_brace_;
    }

    public void SetClosedBrace (TClosedBrace node)
    {
        if(_closed_brace_ != null)
        {
            _closed_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closed_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_function_)
            + ToString (_keyword_main_)
            + ToString (_left_parenthesis_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_closed_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_function_ == child )
        {
            _keyword_function_ = null;
            return;
        }
        if ( _keyword_main_ == child )
        {
            _keyword_main_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closed_brace_ == child )
        {
            _closed_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_function_ == oldChild )
        {
            SetKeywordFunction ((TKeywordFunction) newChild);
            return;
        }
        if ( _keyword_main_ == oldChild )
        {
            SetKeywordMain ((TKeywordMain) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closed_brace_ == oldChild )
        {
            SetClosedBrace ((TClosedBrace) newChild);
            return;
        }
    }

}
public sealed class ANoArguments : PArguments
{


    public ANoArguments (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoArguments (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoArguments(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AYesArguments : PArguments
{
    private PNumArgs _num_args_;

    public AYesArguments ()
    {
    }

    public AYesArguments (
            PNumArgs _num_args_
    )
    {
        SetNumArgs (_num_args_);
    }

    public override Object Clone()
    {
        return new AYesArguments (
            (PNumArgs)CloneNode (_num_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAYesArguments(this);
    }

    public PNumArgs GetNumArgs ()
    {
        return _num_args_;
    }

    public void SetNumArgs (PNumArgs node)
    {
        if(_num_args_ != null)
        {
            _num_args_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_args_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_args_ == child )
        {
            _num_args_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_args_ == oldChild )
        {
            SetNumArgs ((PNumArgs) newChild);
            return;
        }
    }

}
public sealed class ASingleNumArgs : PNumArgs
{
    private PArgument _argument_;

    public ASingleNumArgs ()
    {
    }

    public ASingleNumArgs (
            PArgument _argument_
    )
    {
        SetArgument (_argument_);
    }

    public override Object Clone()
    {
        return new ASingleNumArgs (
            (PArgument)CloneNode (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleNumArgs(this);
    }

    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
    }

}
public sealed class AMultipleNumArgs : PNumArgs
{
    private PNumArgs _num_args_;
    private TComma _comma_;
    private PArgument _argument_;

    public AMultipleNumArgs ()
    {
    }

    public AMultipleNumArgs (
            PNumArgs _num_args_,
            TComma _comma_,
            PArgument _argument_
    )
    {
        SetNumArgs (_num_args_);
        SetComma (_comma_);
        SetArgument (_argument_);
    }

    public override Object Clone()
    {
        return new AMultipleNumArgs (
            (PNumArgs)CloneNode (_num_args_),
            (TComma)CloneNode (_comma_),
            (PArgument)CloneNode (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleNumArgs(this);
    }

    public PNumArgs GetNumArgs ()
    {
        return _num_args_;
    }

    public void SetNumArgs (PNumArgs node)
    {
        if(_num_args_ != null)
        {
            _num_args_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_args_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_args_)
            + ToString (_comma_)
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_args_ == child )
        {
            _num_args_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_args_ == oldChild )
        {
            SetNumArgs ((PNumArgs) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
    }

}
public sealed class AArgument : PArgument
{
    private TId _type_;
    private TId _varname_;

    public AArgument ()
    {
    }

    public AArgument (
            TId _type_,
            TId _varname_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new AArgument (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArgument(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class AIfStatements : PStatements
{
    private PIfStatement _if_statement_;
    private PStatements _statements_;

    public AIfStatements ()
    {
    }

    public AIfStatements (
            PIfStatement _if_statement_,
            PStatements _statements_
    )
    {
        SetIfStatement (_if_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AIfStatements (
            (PIfStatement)CloneNode (_if_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatements(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class AIfElseStatements : PStatements
{
    private PIfElseStatement _if_else_statement_;
    private PStatements _statements_;

    public AIfElseStatements ()
    {
    }

    public AIfElseStatements (
            PIfElseStatement _if_else_statement_,
            PStatements _statements_
    )
    {
        SetIfElseStatement (_if_else_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AIfElseStatements (
            (PIfElseStatement)CloneNode (_if_else_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElseStatements(this);
    }

    public PIfElseStatement GetIfElseStatement ()
    {
        return _if_else_statement_;
    }

    public void SetIfElseStatement (PIfElseStatement node)
    {
        if(_if_else_statement_ != null)
        {
            _if_else_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_else_statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_else_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_else_statement_ == child )
        {
            _if_else_statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_else_statement_ == oldChild )
        {
            SetIfElseStatement ((PIfElseStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class AWhileStatements : PStatements
{
    private PWhileStatement _while_statement_;
    private PStatements _statements_;

    public AWhileStatements ()
    {
    }

    public AWhileStatements (
            PWhileStatement _while_statement_,
            PStatements _statements_
    )
    {
        SetWhileStatement (_while_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AWhileStatements (
            (PWhileStatement)CloneNode (_while_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatements(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class APassStatements : PStatements
{


    public APassStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new APassStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PIfStatement
{
    private TKeywordIf _keyword_if_;
    private PCondition _condition_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TClosedBrace _closed_brace_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            TKeywordIf _keyword_if_,
            PCondition _condition_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TClosedBrace _closed_brace_
    )
    {
        SetKeywordIf (_keyword_if_);
        SetCondition (_condition_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetClosedBrace (_closed_brace_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (TKeywordIf)CloneNode (_keyword_if_),
            (PCondition)CloneNode (_condition_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TClosedBrace)CloneNode (_closed_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public TKeywordIf GetKeywordIf ()
    {
        return _keyword_if_;
    }

    public void SetKeywordIf (TKeywordIf node)
    {
        if(_keyword_if_ != null)
        {
            _keyword_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_if_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosedBrace GetClosedBrace ()
    {
        return _closed_brace_;
    }

    public void SetClosedBrace (TClosedBrace node)
    {
        if(_closed_brace_ != null)
        {
            _closed_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closed_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_if_)
            + ToString (_condition_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_closed_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_if_ == child )
        {
            _keyword_if_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closed_brace_ == child )
        {
            _closed_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_if_ == oldChild )
        {
            SetKeywordIf ((TKeywordIf) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closed_brace_ == oldChild )
        {
            SetClosedBrace ((TClosedBrace) newChild);
            return;
        }
    }

}
public sealed class AIfElseStatement : PIfElseStatement
{
    private TKeywordIf _keyword_if_;
    private PCondition _condition_;
    private TOpenBrace _if_open_brace_;
    private PStatements _if_statements_;
    private TClosedBrace _if_closed_brace_;
    private TKeywordElse _keyword_else_;
    private TOpenBrace _else_open_brace_;
    private PStatements _else_statements_;
    private TClosedBrace _else_closed_brace_;

    public AIfElseStatement ()
    {
    }

    public AIfElseStatement (
            TKeywordIf _keyword_if_,
            PCondition _condition_,
            TOpenBrace _if_open_brace_,
            PStatements _if_statements_,
            TClosedBrace _if_closed_brace_,
            TKeywordElse _keyword_else_,
            TOpenBrace _else_open_brace_,
            PStatements _else_statements_,
            TClosedBrace _else_closed_brace_
    )
    {
        SetKeywordIf (_keyword_if_);
        SetCondition (_condition_);
        SetIfOpenBrace (_if_open_brace_);
        SetIfStatements (_if_statements_);
        SetIfClosedBrace (_if_closed_brace_);
        SetKeywordElse (_keyword_else_);
        SetElseOpenBrace (_else_open_brace_);
        SetElseStatements (_else_statements_);
        SetElseClosedBrace (_else_closed_brace_);
    }

    public override Object Clone()
    {
        return new AIfElseStatement (
            (TKeywordIf)CloneNode (_keyword_if_),
            (PCondition)CloneNode (_condition_),
            (TOpenBrace)CloneNode (_if_open_brace_),
            (PStatements)CloneNode (_if_statements_),
            (TClosedBrace)CloneNode (_if_closed_brace_),
            (TKeywordElse)CloneNode (_keyword_else_),
            (TOpenBrace)CloneNode (_else_open_brace_),
            (PStatements)CloneNode (_else_statements_),
            (TClosedBrace)CloneNode (_else_closed_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElseStatement(this);
    }

    public TKeywordIf GetKeywordIf ()
    {
        return _keyword_if_;
    }

    public void SetKeywordIf (TKeywordIf node)
    {
        if(_keyword_if_ != null)
        {
            _keyword_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_if_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TOpenBrace GetIfOpenBrace ()
    {
        return _if_open_brace_;
    }

    public void SetIfOpenBrace (TOpenBrace node)
    {
        if(_if_open_brace_ != null)
        {
            _if_open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_open_brace_ = node;
    }
    public PStatements GetIfStatements ()
    {
        return _if_statements_;
    }

    public void SetIfStatements (PStatements node)
    {
        if(_if_statements_ != null)
        {
            _if_statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statements_ = node;
    }
    public TClosedBrace GetIfClosedBrace ()
    {
        return _if_closed_brace_;
    }

    public void SetIfClosedBrace (TClosedBrace node)
    {
        if(_if_closed_brace_ != null)
        {
            _if_closed_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_closed_brace_ = node;
    }
    public TKeywordElse GetKeywordElse ()
    {
        return _keyword_else_;
    }

    public void SetKeywordElse (TKeywordElse node)
    {
        if(_keyword_else_ != null)
        {
            _keyword_else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_else_ = node;
    }
    public TOpenBrace GetElseOpenBrace ()
    {
        return _else_open_brace_;
    }

    public void SetElseOpenBrace (TOpenBrace node)
    {
        if(_else_open_brace_ != null)
        {
            _else_open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_open_brace_ = node;
    }
    public PStatements GetElseStatements ()
    {
        return _else_statements_;
    }

    public void SetElseStatements (PStatements node)
    {
        if(_else_statements_ != null)
        {
            _else_statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_statements_ = node;
    }
    public TClosedBrace GetElseClosedBrace ()
    {
        return _else_closed_brace_;
    }

    public void SetElseClosedBrace (TClosedBrace node)
    {
        if(_else_closed_brace_ != null)
        {
            _else_closed_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_closed_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_if_)
            + ToString (_condition_)
            + ToString (_if_open_brace_)
            + ToString (_if_statements_)
            + ToString (_if_closed_brace_)
            + ToString (_keyword_else_)
            + ToString (_else_open_brace_)
            + ToString (_else_statements_)
            + ToString (_else_closed_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_if_ == child )
        {
            _keyword_if_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _if_open_brace_ == child )
        {
            _if_open_brace_ = null;
            return;
        }
        if ( _if_statements_ == child )
        {
            _if_statements_ = null;
            return;
        }
        if ( _if_closed_brace_ == child )
        {
            _if_closed_brace_ = null;
            return;
        }
        if ( _keyword_else_ == child )
        {
            _keyword_else_ = null;
            return;
        }
        if ( _else_open_brace_ == child )
        {
            _else_open_brace_ = null;
            return;
        }
        if ( _else_statements_ == child )
        {
            _else_statements_ = null;
            return;
        }
        if ( _else_closed_brace_ == child )
        {
            _else_closed_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_if_ == oldChild )
        {
            SetKeywordIf ((TKeywordIf) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
        if ( _if_open_brace_ == oldChild )
        {
            SetIfOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _if_statements_ == oldChild )
        {
            SetIfStatements ((PStatements) newChild);
            return;
        }
        if ( _if_closed_brace_ == oldChild )
        {
            SetIfClosedBrace ((TClosedBrace) newChild);
            return;
        }
        if ( _keyword_else_ == oldChild )
        {
            SetKeywordElse ((TKeywordElse) newChild);
            return;
        }
        if ( _else_open_brace_ == oldChild )
        {
            SetElseOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _else_statements_ == oldChild )
        {
            SetElseStatements ((PStatements) newChild);
            return;
        }
        if ( _else_closed_brace_ == oldChild )
        {
            SetElseClosedBrace ((TClosedBrace) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PWhileStatement
{
    private TKeywordWhile _keyword_while_;
    private PCondition _condition_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TClosedBrace _closed_brace_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            TKeywordWhile _keyword_while_,
            PCondition _condition_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TClosedBrace _closed_brace_
    )
    {
        SetKeywordWhile (_keyword_while_);
        SetCondition (_condition_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetClosedBrace (_closed_brace_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (TKeywordWhile)CloneNode (_keyword_while_),
            (PCondition)CloneNode (_condition_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TClosedBrace)CloneNode (_closed_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public TKeywordWhile GetKeywordWhile ()
    {
        return _keyword_while_;
    }

    public void SetKeywordWhile (TKeywordWhile node)
    {
        if(_keyword_while_ != null)
        {
            _keyword_while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_while_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosedBrace GetClosedBrace ()
    {
        return _closed_brace_;
    }

    public void SetClosedBrace (TClosedBrace node)
    {
        if(_closed_brace_ != null)
        {
            _closed_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closed_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_while_)
            + ToString (_condition_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_closed_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_while_ == child )
        {
            _keyword_while_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closed_brace_ == child )
        {
            _closed_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_while_ == oldChild )
        {
            SetKeywordWhile ((TKeywordWhile) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closed_brace_ == oldChild )
        {
            SetClosedBrace ((TClosedBrace) newChild);
            return;
        }
    }

}
public sealed class ACondition : PCondition
{
    private TLeftParenthesis _left_parenthesis_;
    private PExpression _expression_;
    private TRightParenthesis _right_parenthesis_;

    public ACondition ()
    {
    }

    public ACondition (
            TLeftParenthesis _left_parenthesis_,
            PExpression _expression_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetExpression (_expression_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new ACondition (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondition(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_expression_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class AAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PAssignment _assignment_;
    private TEol _eol_;

    public AAssignStatement ()
    {
    }

    public AAssignStatement (
            TId _id_,
            TAssign _assign_,
            PAssignment _assignment_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetAssignment (_assignment_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PAssignment)CloneNode (_assignment_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_assignment_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignment : PAssignment
{
    private PExpression _expression_;

    public AAssignment ()
    {
    }

    public AAssignment (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AAssignment (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignment(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatement : PFunctionCallStatement
{
    private TId _id_;
    private TLeftParenthesis _left_parenthesis_;
    private PParameters _parameters_;
    private TRightParenthesis _right_parenthesis_;
    private TEol _eol_;

    public AFunctionCallStatement ()
    {
    }

    public AFunctionCallStatement (
            TId _id_,
            TLeftParenthesis _left_parenthesis_,
            PParameters _parameters_,
            TRightParenthesis _right_parenthesis_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLeftParenthesis (_left_parenthesis_);
        SetParameters (_parameters_);
        SetRightParenthesis (_right_parenthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatement (
            (TId)CloneNode (_id_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PParameters)CloneNode (_parameters_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_left_parenthesis_)
            + ToString (_parameters_)
            + ToString (_right_parenthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ANoParameters : PParameters
{


    public ANoParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AYesParameters : PParameters
{
    private PNumParameters _num_parameters_;

    public AYesParameters ()
    {
    }

    public AYesParameters (
            PNumParameters _num_parameters_
    )
    {
        SetNumParameters (_num_parameters_);
    }

    public override Object Clone()
    {
        return new AYesParameters (
            (PNumParameters)CloneNode (_num_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAYesParameters(this);
    }

    public PNumParameters GetNumParameters ()
    {
        return _num_parameters_;
    }

    public void SetNumParameters (PNumParameters node)
    {
        if(_num_parameters_ != null)
        {
            _num_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_parameters_ == child )
        {
            _num_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_parameters_ == oldChild )
        {
            SetNumParameters ((PNumParameters) newChild);
            return;
        }
    }

}
public sealed class AOneNumParameters : PNumParameters
{
    private PParameter _parameter_;

    public AOneNumParameters ()
    {
    }

    public AOneNumParameters (
            PParameter _parameter_
    )
    {
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new AOneNumParameters (
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneNumParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class AMultipleNumParameters : PNumParameters
{
    private PNumParameters _num_parameters_;
    private TComma _comma_;
    private PParameter _parameter_;

    public AMultipleNumParameters ()
    {
    }

    public AMultipleNumParameters (
            PNumParameters _num_parameters_,
            TComma _comma_,
            PParameter _parameter_
    )
    {
        SetNumParameters (_num_parameters_);
        SetComma (_comma_);
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new AMultipleNumParameters (
            (PNumParameters)CloneNode (_num_parameters_),
            (TComma)CloneNode (_comma_),
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleNumParameters(this);
    }

    public PNumParameters GetNumParameters ()
    {
        return _num_parameters_;
    }

    public void SetNumParameters (PNumParameters node)
    {
        if(_num_parameters_ != null)
        {
            _num_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_parameters_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_num_parameters_)
            + ToString (_comma_)
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _num_parameters_ == child )
        {
            _num_parameters_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _num_parameters_ == oldChild )
        {
            SetNumParameters ((PNumParameters) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class AParameter : PParameter
{
    private PExpression _expression_;

    public AParameter ()
    {
    }

    public AParameter (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AParameter (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameter(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AEqualsEquivalenceComparator : PEquivalenceComparator
{
    private TEquivalent _equivalent_;

    public AEqualsEquivalenceComparator ()
    {
    }

    public AEqualsEquivalenceComparator (
            TEquivalent _equivalent_
    )
    {
        SetEquivalent (_equivalent_);
    }

    public override Object Clone()
    {
        return new AEqualsEquivalenceComparator (
            (TEquivalent)CloneNode (_equivalent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualsEquivalenceComparator(this);
    }

    public TEquivalent GetEquivalent ()
    {
        return _equivalent_;
    }

    public void SetEquivalent (TEquivalent node)
    {
        if(_equivalent_ != null)
        {
            _equivalent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equivalent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equivalent_ == child )
        {
            _equivalent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equivalent_ == oldChild )
        {
            SetEquivalent ((TEquivalent) newChild);
            return;
        }
    }

}
public sealed class ANotEqualEquivalenceComparator : PEquivalenceComparator
{
    private TNotEquivalent _not_equivalent_;

    public ANotEqualEquivalenceComparator ()
    {
    }

    public ANotEqualEquivalenceComparator (
            TNotEquivalent _not_equivalent_
    )
    {
        SetNotEquivalent (_not_equivalent_);
    }

    public override Object Clone()
    {
        return new ANotEqualEquivalenceComparator (
            (TNotEquivalent)CloneNode (_not_equivalent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotEqualEquivalenceComparator(this);
    }

    public TNotEquivalent GetNotEquivalent ()
    {
        return _not_equivalent_;
    }

    public void SetNotEquivalent (TNotEquivalent node)
    {
        if(_not_equivalent_ != null)
        {
            _not_equivalent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equivalent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_equivalent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_equivalent_ == child )
        {
            _not_equivalent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_equivalent_ == oldChild )
        {
            SetNotEquivalent ((TNotEquivalent) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanGreatLessComparator : PGreatLessComparator
{
    private TGreaterThan _greater_than_;

    public AGreaterThanGreatLessComparator ()
    {
    }

    public AGreaterThanGreatLessComparator (
            TGreaterThan _greater_than_
    )
    {
        SetGreaterThan (_greater_than_);
    }

    public override Object Clone()
    {
        return new AGreaterThanGreatLessComparator (
            (TGreaterThan)CloneNode (_greater_than_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanGreatLessComparator(this);
    }

    public TGreaterThan GetGreaterThan ()
    {
        return _greater_than_;
    }

    public void SetGreaterThan (TGreaterThan node)
    {
        if(_greater_than_ != null)
        {
            _greater_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_than_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_than_ == child )
        {
            _greater_than_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_than_ == oldChild )
        {
            SetGreaterThan ((TGreaterThan) newChild);
            return;
        }
    }

}
public sealed class ALessThanGreatLessComparator : PGreatLessComparator
{
    private TLessThan _less_than_;

    public ALessThanGreatLessComparator ()
    {
    }

    public ALessThanGreatLessComparator (
            TLessThan _less_than_
    )
    {
        SetLessThan (_less_than_);
    }

    public override Object Clone()
    {
        return new ALessThanGreatLessComparator (
            (TLessThan)CloneNode (_less_than_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanGreatLessComparator(this);
    }

    public TLessThan GetLessThan ()
    {
        return _less_than_;
    }

    public void SetLessThan (TLessThan node)
    {
        if(_less_than_ != null)
        {
            _less_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_than_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_than_ == child )
        {
            _less_than_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_than_ == oldChild )
        {
            SetLessThan ((TLessThan) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanOrEqualGreatLessComparator : PGreatLessComparator
{
    private TGreaterThanOrEqual _greater_than_or_equal_;

    public AGreaterThanOrEqualGreatLessComparator ()
    {
    }

    public AGreaterThanOrEqualGreatLessComparator (
            TGreaterThanOrEqual _greater_than_or_equal_
    )
    {
        SetGreaterThanOrEqual (_greater_than_or_equal_);
    }

    public override Object Clone()
    {
        return new AGreaterThanOrEqualGreatLessComparator (
            (TGreaterThanOrEqual)CloneNode (_greater_than_or_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanOrEqualGreatLessComparator(this);
    }

    public TGreaterThanOrEqual GetGreaterThanOrEqual ()
    {
        return _greater_than_or_equal_;
    }

    public void SetGreaterThanOrEqual (TGreaterThanOrEqual node)
    {
        if(_greater_than_or_equal_ != null)
        {
            _greater_than_or_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_or_equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_than_or_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_than_or_equal_ == child )
        {
            _greater_than_or_equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_than_or_equal_ == oldChild )
        {
            SetGreaterThanOrEqual ((TGreaterThanOrEqual) newChild);
            return;
        }
    }

}
public sealed class ALessThanOrEqualGreatLessComparator : PGreatLessComparator
{
    private TLessThanOrEqual _less_than_or_equal_;

    public ALessThanOrEqualGreatLessComparator ()
    {
    }

    public ALessThanOrEqualGreatLessComparator (
            TLessThanOrEqual _less_than_or_equal_
    )
    {
        SetLessThanOrEqual (_less_than_or_equal_);
    }

    public override Object Clone()
    {
        return new ALessThanOrEqualGreatLessComparator (
            (TLessThanOrEqual)CloneNode (_less_than_or_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanOrEqualGreatLessComparator(this);
    }

    public TLessThanOrEqual GetLessThanOrEqual ()
    {
        return _less_than_or_equal_;
    }

    public void SetLessThanOrEqual (TLessThanOrEqual node)
    {
        if(_less_than_or_equal_ != null)
        {
            _less_than_or_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_or_equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_than_or_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_than_or_equal_ == child )
        {
            _less_than_or_equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_than_or_equal_ == oldChild )
        {
            SetLessThanOrEqual ((TLessThanOrEqual) newChild);
            return;
        }
    }

}
public sealed class AOrComparisonExpression : PExpression
{
    private PExpression _expression_;
    private TOr _or_;
    private PExpression7 _expression7_;

    public AOrComparisonExpression ()
    {
    }

    public AOrComparisonExpression (
            PExpression _expression_,
            TOr _or_,
            PExpression7 _expression7_
    )
    {
        SetExpression (_expression_);
        SetOr (_or_);
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new AOrComparisonExpression (
            (PExpression)CloneNode (_expression_),
            (TOr)CloneNode (_or_),
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrComparisonExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_or_)
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression7 _expression7_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression7 _expression7_
    )
    {
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class AAndComparisonExpression7 : PExpression7
{
    private PExpression7 _expression7_;
    private TAnd _and_;
    private PExpression6 _expression6_;

    public AAndComparisonExpression7 ()
    {
    }

    public AAndComparisonExpression7 (
            PExpression7 _expression7_,
            TAnd _and_,
            PExpression6 _expression6_
    )
    {
        SetExpression7 (_expression7_);
        SetAnd (_and_);
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new AAndComparisonExpression7 (
            (PExpression7)CloneNode (_expression7_),
            (TAnd)CloneNode (_and_),
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndComparisonExpression7(this);
    }

    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression7_)
            + ToString (_and_)
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class APassExpression7 : PExpression7
{
    private PExpression6 _expression6_;

    public APassExpression7 ()
    {
    }

    public APassExpression7 (
            PExpression6 _expression6_
    )
    {
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new APassExpression7 (
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression7(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class AEqualityComparisonExpression6 : PExpression6
{
    private PExpression6 _expression6_;
    private PEquivalenceComparator _equivalence_comparator_;
    private PExpression5 _expression5_;

    public AEqualityComparisonExpression6 ()
    {
    }

    public AEqualityComparisonExpression6 (
            PExpression6 _expression6_,
            PEquivalenceComparator _equivalence_comparator_,
            PExpression5 _expression5_
    )
    {
        SetExpression6 (_expression6_);
        SetEquivalenceComparator (_equivalence_comparator_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new AEqualityComparisonExpression6 (
            (PExpression6)CloneNode (_expression6_),
            (PEquivalenceComparator)CloneNode (_equivalence_comparator_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualityComparisonExpression6(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }
    public PEquivalenceComparator GetEquivalenceComparator ()
    {
        return _equivalence_comparator_;
    }

    public void SetEquivalenceComparator (PEquivalenceComparator node)
    {
        if(_equivalence_comparator_ != null)
        {
            _equivalence_comparator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalence_comparator_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
            + ToString (_equivalence_comparator_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
        if ( _equivalence_comparator_ == child )
        {
            _equivalence_comparator_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
        if ( _equivalence_comparator_ == oldChild )
        {
            SetEquivalenceComparator ((PEquivalenceComparator) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression6 : PExpression6
{
    private PExpression5 _expression5_;

    public APassExpression6 ()
    {
    }

    public APassExpression6 (
            PExpression5 _expression5_
    )
    {
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new APassExpression6 (
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression6(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AGreaterLessThanComparisonExpression5 : PExpression5
{
    private PExpression4 _first_;
    private PGreatLessComparator _great_less_comparator_;
    private PExpression4 _second_;

    public AGreaterLessThanComparisonExpression5 ()
    {
    }

    public AGreaterLessThanComparisonExpression5 (
            PExpression4 _first_,
            PGreatLessComparator _great_less_comparator_,
            PExpression4 _second_
    )
    {
        SetFirst (_first_);
        SetGreatLessComparator (_great_less_comparator_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new AGreaterLessThanComparisonExpression5 (
            (PExpression4)CloneNode (_first_),
            (PGreatLessComparator)CloneNode (_great_less_comparator_),
            (PExpression4)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterLessThanComparisonExpression5(this);
    }

    public PExpression4 GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PExpression4 node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PGreatLessComparator GetGreatLessComparator ()
    {
        return _great_less_comparator_;
    }

    public void SetGreatLessComparator (PGreatLessComparator node)
    {
        if(_great_less_comparator_ != null)
        {
            _great_less_comparator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _great_less_comparator_ = node;
    }
    public PExpression4 GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PExpression4 node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_great_less_comparator_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _great_less_comparator_ == child )
        {
            _great_less_comparator_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PExpression4) newChild);
            return;
        }
        if ( _great_less_comparator_ == oldChild )
        {
            SetGreatLessComparator ((PGreatLessComparator) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class APassExpression5 : PExpression5
{
    private PExpression4 _expression4_;

    public APassExpression5 ()
    {
    }

    public APassExpression5 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression5 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression5(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AAddExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TPlus _plus_;
    private PExpression3 _expression3_;

    public AAddExpression4 ()
    {
    }

    public AAddExpression4 (
            PExpression4 _expression4_,
            TPlus _plus_,
            PExpression3 _expression3_
    )
    {
        SetExpression4 (_expression4_);
        SetPlus (_plus_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AAddExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TPlus)CloneNode (_plus_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_plus_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ASubtractExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TSub _sub_;
    private PExpression3 _expression3_;

    public ASubtractExpression4 ()
    {
    }

    public ASubtractExpression4 (
            PExpression4 _expression4_,
            TSub _sub_,
            PExpression3 _expression3_
    )
    {
        SetExpression4 (_expression4_);
        SetSub (_sub_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ASubtractExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TSub)CloneNode (_sub_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TSub GetSub ()
    {
        return _sub_;
    }

    public void SetSub (TSub node)
    {
        if(_sub_ != null)
        {
            _sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sub_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_sub_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _sub_ == child )
        {
            _sub_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _sub_ == oldChild )
        {
            SetSub ((TSub) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private PExpression3 _expression3_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TMult _mult_;
    private PExpression2 _expression2_;

    public AMultiplyExpression3 ()
    {
    }

    public AMultiplyExpression3 (
            PExpression3 _expression3_,
            TMult _mult_,
            PExpression2 _expression2_
    )
    {
        SetExpression3 (_expression3_);
        SetMult (_mult_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TMult)CloneNode (_mult_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_mult_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ADivisionExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TDiv _div_;
    private PExpression2 _expression2_;

    public ADivisionExpression3 ()
    {
    }

    public ADivisionExpression3 (
            PExpression3 _expression3_,
            TDiv _div_,
            PExpression2 _expression2_
    )
    {
        SetExpression3 (_expression3_);
        SetDiv (_div_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new ADivisionExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TDiv)CloneNode (_div_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivisionExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TDiv GetDiv ()
    {
        return _div_;
    }

    public void SetDiv (TDiv node)
    {
        if(_div_ != null)
        {
            _div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _div_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_div_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _div_ == child )
        {
            _div_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _div_ == oldChild )
        {
            SetDiv ((TDiv) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression2 _expression2_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression2 : PExpression2
{
    private TSub _sub_;
    private PExpression1 _expression1_;

    public ANegativeExpression2 ()
    {
    }

    public ANegativeExpression2 (
            TSub _sub_,
            PExpression1 _expression1_
    )
    {
        SetSub (_sub_);
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression2 (
            (TSub)CloneNode (_sub_),
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression2(this);
    }

    public TSub GetSub ()
    {
        return _sub_;
    }

    public void SetSub (TSub node)
    {
        if(_sub_ != null)
        {
            _sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sub_ = node;
    }
    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sub_)
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sub_ == child )
        {
            _sub_ = null;
            return;
        }
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sub_ == oldChild )
        {
            SetSub ((TSub) newChild);
            return;
        }
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression1 _expression1_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression1 _expression1_
    )
    {
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class AParenthsisExpression1 : PExpression1
{
    private TLeftParenthesis _left_parenthesis_;
    private PExpression _expression_;
    private TRightParenthesis _right_parenthesis_;

    public AParenthsisExpression1 ()
    {
    }

    public AParenthsisExpression1 (
            TLeftParenthesis _left_parenthesis_,
            PExpression _expression_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetExpression (_expression_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParenthsisExpression1 (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthsisExpression1(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_expression_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class APassExpression1 : PExpression1
{
    private POperand _operand_;

    public APassExpression1 ()
    {
    }

    public APassExpression1 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression1 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression1(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloat _float_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
