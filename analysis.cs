/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAConstantLines(AConstantLines node);
    void CaseAFunctionLines(AFunctionLines node);
    void CaseAConstants(AConstants node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseANonMainFunctions(ANonMainFunctions node);
    void CaseAMainFunctions(AMainFunctions node);
    void CaseAFunction(AFunction node);
    void CaseAMain(AMain node);
    void CaseAMultipleArguments(AMultipleArguments node);
    void CaseASingleArguments(ASingleArguments node);
    void CaseAPassArguments(APassArguments node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseAIfStatements(AIfStatements node);
    void CaseAIfElseStatements(AIfElseStatements node);
    void CaseAWhileStatements(AWhileStatements node);
    void CaseAPassStatements(APassStatements node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAIfElseStatement(AIfElseStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseAOneParameters(AOneParameters node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseAPassParameters(APassParameters node);
    void CaseAOrComparisonExpression(AOrComparisonExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAAndComparisonExpression7(AAndComparisonExpression7 node);
    void CaseAPassExpression7(APassExpression7 node);
    void CaseAEqualsExpression6(AEqualsExpression6 node);
    void CaseANotEqualExpression6(ANotEqualExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseAGreaterThanExpression5(AGreaterThanExpression5 node);
    void CaseALessThanExpression5(ALessThanExpression5 node);
    void CaseAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node);
    void CaseALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseAAddExpression4(AAddExpression4 node);
    void CaseASubtractExpression4(ASubtractExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAMultiplyExpression3(AMultiplyExpression3 node);
    void CaseADivisionExpression3(ADivisionExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseANegativeExpression2(ANegativeExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAParenthsisExpression1(AParenthsisExpression1 node);
    void CaseAPassExpression1(APassExpression1 node);
    void CaseAStringOperand(AStringOperand node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAVariableOperand(AVariableOperand node);

    void CaseTKeywordIf(TKeywordIf node);
    void CaseTKeywordElse(TKeywordElse node);
    void CaseTKeywordWhile(TKeywordWhile node);
    void CaseTKeywordConstant(TKeywordConstant node);
    void CaseTKeywordFunction(TKeywordFunction node);
    void CaseTKeywordMain(TKeywordMain node);
    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTSub(TSub node);
    void CaseTMult(TMult node);
    void CaseTDiv(TDiv node);
    void CaseTEquivalent(TEquivalent node);
    void CaseTNotEquivalent(TNotEquivalent node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTGreaterThanOrEqual(TGreaterThanOrEqual node);
    void CaseTLessThan(TLessThan node);
    void CaseTLessThanOrEqual(TLessThanOrEqual node);
    void CaseTOr(TOr node);
    void CaseTAnd(TAnd node);
    void CaseTNot(TNot node);
    void CaseTEol(TEol node);
    void CaseTEscapeQuote(TEscapeQuote node);
    void CaseTString(TString node);
    void CaseTLeftParenthesis(TLeftParenthesis node);
    void CaseTRightParenthesis(TRightParenthesis node);
    void CaseTOpenBrace(TOpenBrace node);
    void CaseTClosedBrace(TClosedBrace node);
    void CaseTComma(TComma node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTId(TId node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantLines(AConstantLines node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionLines(AFunctionLines node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstants(AConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonMainFunctions(ANonMainFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainFunctions(AMainFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunction(AFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMain(AMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleArguments(AMultipleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleArguments(ASingleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassArguments(APassArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatements(AIfStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElseStatements(AIfElseStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatements(AWhileStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassStatements(APassStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElseStatement(AIfElseStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneParameters(AOneParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassParameters(APassParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrComparisonExpression(AOrComparisonExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression7(APassExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualsExpression6(AEqualsExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotEqualExpression6(ANotEqualExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanExpression5(ALessThanExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression4(AAddExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivisionExpression3(ADivisionExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression2(ANegativeExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthsisExpression1(AParenthsisExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression1(APassExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTKeywordIf(TKeywordIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordElse(TKeywordElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordWhile(TKeywordWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordConstant(TKeywordConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordFunction(TKeywordFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordMain(TKeywordMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSub(TSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquivalent(TEquivalent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEquivalent(TNotEquivalent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThanOrEqual(TGreaterThanOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThanOrEqual(TLessThanOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEscapeQuote(TEscapeQuote node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightParenthesis(TRightParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBrace(TOpenBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosedBrace(TClosedBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetLines() != null)
        {
            node.GetLines().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstantLines(AConstantLines node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantLines(AConstantLines node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantLines(AConstantLines node)
    {
        InAConstantLines(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetLines() != null)
        {
            node.GetLines().Apply(this);
        }
        OutAConstantLines(node);
    }
    public virtual void InAFunctionLines(AFunctionLines node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionLines(AFunctionLines node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionLines(AFunctionLines node)
    {
        InAFunctionLines(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAFunctionLines(node);
    }
    public virtual void InAConstants(AConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstants(AConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstants(AConstants node)
    {
        InAConstants(node);
        if(node.GetKeywordConstant() != null)
        {
            node.GetKeywordConstant().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstants(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InANonMainFunctions(ANonMainFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonMainFunctions(ANonMainFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANonMainFunctions(ANonMainFunctions node)
    {
        InANonMainFunctions(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutANonMainFunctions(node);
    }
    public virtual void InAMainFunctions(AMainFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunctions(AMainFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunctions(AMainFunctions node)
    {
        InAMainFunctions(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainFunctions(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetKeywordFunction() != null)
        {
            node.GetKeywordFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAMain(AMain node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMain(AMain node)
    {
        DefaultOut(node);
    }

    public override void CaseAMain(AMain node)
    {
        InAMain(node);
        if(node.GetKeywordFunction() != null)
        {
            node.GetKeywordFunction().Apply(this);
        }
        if(node.GetKeywordMain() != null)
        {
            node.GetKeywordMain().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        OutAMain(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InASingleArguments(ASingleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleArguments(ASingleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleArguments(ASingleArguments node)
    {
        InASingleArguments(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutASingleArguments(node);
    }
    public virtual void InAPassArguments(APassArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassArguments(APassArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassArguments(APassArguments node)
    {
        InAPassArguments(node);
        OutAPassArguments(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InAIfStatements(AIfStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatements(AIfStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatements(AIfStatements node)
    {
        InAIfStatements(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAIfStatements(node);
    }
    public virtual void InAIfElseStatements(AIfElseStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStatements(AIfElseStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStatements(AIfElseStatements node)
    {
        InAIfElseStatements(node);
        if(node.GetIfElseStatement() != null)
        {
            node.GetIfElseStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAIfElseStatements(node);
    }
    public virtual void InAWhileStatements(AWhileStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatements(AWhileStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatements(AWhileStatements node)
    {
        InAWhileStatements(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAWhileStatements(node);
    }
    public virtual void InAPassStatements(APassStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassStatements(APassStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassStatements(APassStatements node)
    {
        InAPassStatements(node);
        OutAPassStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAIfElseStatement(AIfElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStatement(AIfElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStatement(AIfElseStatement node)
    {
        InAIfElseStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        if(node.GetKeywordElse() != null)
        {
            node.GetKeywordElse().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        OutAIfElseStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetKeywordWhile() != null)
        {
            node.GetKeywordWhile().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAOneParameters(AOneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParameters(AOneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParameters(AOneParameters node)
    {
        InAOneParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOneParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InAPassParameters(APassParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassParameters(APassParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassParameters(APassParameters node)
    {
        InAPassParameters(node);
        OutAPassParameters(node);
    }
    public virtual void InAOrComparisonExpression(AOrComparisonExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrComparisonExpression(AOrComparisonExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrComparisonExpression(AOrComparisonExpression node)
    {
        InAOrComparisonExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAOrComparisonExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        InAAndComparisonExpression7(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAAndComparisonExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAEqualsExpression6(AEqualsExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualsExpression6(AEqualsExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualsExpression6(AEqualsExpression6 node)
    {
        InAEqualsExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetEquivalent() != null)
        {
            node.GetEquivalent().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAEqualsExpression6(node);
    }
    public virtual void InANotEqualExpression6(ANotEqualExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualExpression6(ANotEqualExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualExpression6(ANotEqualExpression6 node)
    {
        InANotEqualExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetNotEquivalent() != null)
        {
            node.GetNotEquivalent().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutANotEqualExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        InAGreaterThanExpression5(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAGreaterThanExpression5(node);
    }
    public virtual void InALessThanExpression5(ALessThanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanExpression5(ALessThanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanExpression5(ALessThanExpression5 node)
    {
        InALessThanExpression5(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutALessThanExpression5(node);
    }
    public virtual void InAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        InAGreaterThanOrEqualExpression5(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetGreaterThanOrEqual() != null)
        {
            node.GetGreaterThanOrEqual().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAGreaterThanOrEqualExpression5(node);
    }
    public virtual void InALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        InALessThanOrEqualExpression5(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetLessThanOrEqual() != null)
        {
            node.GetLessThanOrEqual().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutALessThanOrEqualExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAAddExpression4(AAddExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression4(AAddExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression4(AAddExpression4 node)
    {
        InAAddExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAAddExpression4(node);
    }
    public virtual void InASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression4(ASubtractExpression4 node)
    {
        InASubtractExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutASubtractExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        InAMultiplyExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAMultiplyExpression3(node);
    }
    public virtual void InADivisionExpression3(ADivisionExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionExpression3(ADivisionExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionExpression3(ADivisionExpression3 node)
    {
        InADivisionExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutADivisionExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InANegativeExpression2(ANegativeExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression2(ANegativeExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression2(ANegativeExpression2 node)
    {
        InANegativeExpression2(node);
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutANegativeExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAParenthsisExpression1(AParenthsisExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthsisExpression1(AParenthsisExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthsisExpression1(AParenthsisExpression1 node)
    {
        InAParenthsisExpression1(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutAParenthsisExpression1(node);
    }
    public virtual void InAPassExpression1(APassExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression1(APassExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression1(APassExpression1 node)
    {
        InAPassExpression1(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression1(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetLines() != null)
        {
            node.GetLines().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstantLines(AConstantLines node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantLines(AConstantLines node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantLines(AConstantLines node)
    {
        InAConstantLines(node);
        if(node.GetLines() != null)
        {
            node.GetLines().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAConstantLines(node);
    }
    public virtual void InAFunctionLines(AFunctionLines node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionLines(AFunctionLines node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionLines(AFunctionLines node)
    {
        InAFunctionLines(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAFunctionLines(node);
    }
    public virtual void InAConstants(AConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstants(AConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstants(AConstants node)
    {
        InAConstants(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetKeywordConstant() != null)
        {
            node.GetKeywordConstant().Apply(this);
        }
        OutAConstants(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InANonMainFunctions(ANonMainFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonMainFunctions(ANonMainFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANonMainFunctions(ANonMainFunctions node)
    {
        InANonMainFunctions(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutANonMainFunctions(node);
    }
    public virtual void InAMainFunctions(AMainFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunctions(AMainFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunctions(AMainFunctions node)
    {
        InAMainFunctions(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainFunctions(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeywordFunction() != null)
        {
            node.GetKeywordFunction().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAMain(AMain node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMain(AMain node)
    {
        DefaultOut(node);
    }

    public override void CaseAMain(AMain node)
    {
        InAMain(node);
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetKeywordMain() != null)
        {
            node.GetKeywordMain().Apply(this);
        }
        if(node.GetKeywordFunction() != null)
        {
            node.GetKeywordFunction().Apply(this);
        }
        OutAMain(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InASingleArguments(ASingleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleArguments(ASingleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleArguments(ASingleArguments node)
    {
        InASingleArguments(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutASingleArguments(node);
    }
    public virtual void InAPassArguments(APassArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassArguments(APassArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassArguments(APassArguments node)
    {
        InAPassArguments(node);
        OutAPassArguments(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InAIfStatements(AIfStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatements(AIfStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatements(AIfStatements node)
    {
        InAIfStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfStatements(node);
    }
    public virtual void InAIfElseStatements(AIfElseStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStatements(AIfElseStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStatements(AIfElseStatements node)
    {
        InAIfElseStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetIfElseStatement() != null)
        {
            node.GetIfElseStatement().Apply(this);
        }
        OutAIfElseStatements(node);
    }
    public virtual void InAWhileStatements(AWhileStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatements(AWhileStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatements(AWhileStatements node)
    {
        InAWhileStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileStatements(node);
    }
    public virtual void InAPassStatements(APassStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassStatements(APassStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassStatements(APassStatements node)
    {
        InAPassStatements(node);
        OutAPassStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAIfElseStatement(AIfElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStatement(AIfElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStatement(AIfElseStatement node)
    {
        InAIfElseStatement(node);
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetKeywordElse() != null)
        {
            node.GetKeywordElse().Apply(this);
        }
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfElseStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetClosedBrace() != null)
        {
            node.GetClosedBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetKeywordWhile() != null)
        {
            node.GetKeywordWhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAOneParameters(AOneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParameters(AOneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParameters(AOneParameters node)
    {
        InAOneParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOneParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InAPassParameters(APassParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassParameters(APassParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassParameters(APassParameters node)
    {
        InAPassParameters(node);
        OutAPassParameters(node);
    }
    public virtual void InAOrComparisonExpression(AOrComparisonExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrComparisonExpression(AOrComparisonExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrComparisonExpression(AOrComparisonExpression node)
    {
        InAOrComparisonExpression(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOrComparisonExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndComparisonExpression7(AAndComparisonExpression7 node)
    {
        InAAndComparisonExpression7(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAAndComparisonExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAEqualsExpression6(AEqualsExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualsExpression6(AEqualsExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualsExpression6(AEqualsExpression6 node)
    {
        InAEqualsExpression6(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetEquivalent() != null)
        {
            node.GetEquivalent().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAEqualsExpression6(node);
    }
    public virtual void InANotEqualExpression6(ANotEqualExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotEqualExpression6(ANotEqualExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotEqualExpression6(ANotEqualExpression6 node)
    {
        InANotEqualExpression6(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetNotEquivalent() != null)
        {
            node.GetNotEquivalent().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutANotEqualExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanExpression5(AGreaterThanExpression5 node)
    {
        InAGreaterThanExpression5(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAGreaterThanExpression5(node);
    }
    public virtual void InALessThanExpression5(ALessThanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanExpression5(ALessThanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanExpression5(ALessThanExpression5 node)
    {
        InALessThanExpression5(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutALessThanExpression5(node);
    }
    public virtual void InAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOrEqualExpression5(AGreaterThanOrEqualExpression5 node)
    {
        InAGreaterThanOrEqualExpression5(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetGreaterThanOrEqual() != null)
        {
            node.GetGreaterThanOrEqual().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAGreaterThanOrEqualExpression5(node);
    }
    public virtual void InALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOrEqualExpression5(ALessThanOrEqualExpression5 node)
    {
        InALessThanOrEqualExpression5(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetLessThanOrEqual() != null)
        {
            node.GetLessThanOrEqual().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutALessThanOrEqualExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAAddExpression4(AAddExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression4(AAddExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression4(AAddExpression4 node)
    {
        InAAddExpression4(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAAddExpression4(node);
    }
    public virtual void InASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression4(ASubtractExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression4(ASubtractExpression4 node)
    {
        InASubtractExpression4(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutASubtractExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        InAMultiplyExpression3(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMultiplyExpression3(node);
    }
    public virtual void InADivisionExpression3(ADivisionExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionExpression3(ADivisionExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionExpression3(ADivisionExpression3 node)
    {
        InADivisionExpression3(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutADivisionExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InANegativeExpression2(ANegativeExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression2(ANegativeExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression2(ANegativeExpression2 node)
    {
        InANegativeExpression2(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        OutANegativeExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAParenthsisExpression1(AParenthsisExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthsisExpression1(AParenthsisExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthsisExpression1(AParenthsisExpression1 node)
    {
        InAParenthsisExpression1(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutAParenthsisExpression1(node);
    }
    public virtual void InAPassExpression1(APassExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression1(APassExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression1(APassExpression1 node)
    {
        InAPassExpression1(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression1(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}
} // namespace CS426.analysis
